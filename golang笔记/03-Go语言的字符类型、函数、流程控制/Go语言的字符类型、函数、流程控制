
Outline
	1.string和strconv使用
		strings.HasPrefix(s string,prefix string) bool: 判断字符串s是否已prefix开头.
			练习1: 判断一个url是否以http://开头,如果不是,则加上http://
		strings.HasSuffix(s string,suffix string) bool: 判断字符串s是否以suffix结尾
			练习2: 判断一个路径是否以"/"结尾,如果不是,则加上/.
			
		go build -o bin/string.exe .\day3\example\example1-2\
		.\bin\string.exe
		192.168.1.100/user/login c:/window		//这里要输入两个参数
				
		strings.Index(s string,str string) int: 判断str在s中首次出现的位置,如果没有出现,则返回-1
		
		strings.LastIndex(s string,str string) int: 判断str在s中最后出现的位置,如果没有出现,则返回-1
		
			练习3: 写一个函数返回一个字符串在另一个字符串的首次出现和最后出现位置
				func StrIndex(str string,substr string)(init,int){}
		
		strings.Replace(str string,old string,new string, n int): 字符串替换
		
		strings.Count(str string,substr string)int: 字符串统计
		
		strings.Repeat(str string,count int)string: 重复count次str
		
		strings.ToLower(str string)string: 转为小写
		
		strings.ToUpper(str string)string: 转为大写
		
			练习4: 写一个函数分别演示Replace、Count、Repeat、ToLower、ToUpper的用法
			
		strings.TrimSpace(str string): 去掉字符串首尾空白字符
		strings.Trim(str string,cut string): 去掉字符串首尾cut字符
		strings.TrimLeft(str string,cut string): 去掉字符串首cut字符
		strings.TrimReght(str string,cut string): 去掉字符串首cut字符
		
		strings.Field(str string): 返回str空格分隔的所有子串的slice
		strings.Split(str string,split string): 返回str split分隔的所有子串的slice
		
		strings.Join(s1 []string,sep string): 用sep把s1中的所有元素链接起来
		
			练习5: 写一个函数分别演示TrimSpace、Trim、TrimLeft、TrimRight、Field、Split、以及Join的用法
			
		strconv.Itoa(i int): 把一个整数i转成字符串
		
		strings.Atoi(str string)(int,error): 把一个字符串转成整数
		
			练习6: 写一个函数分别演示Itoa、Atoi的用法
		
		
			代码地址:
				https://github.com/banna2019/golang.git
	
				目录: golang/src/day3/example/example3
		
	2.Go中的时间和日期类型
		time包
		time.Time类型,用来表示时间
		获取当前时间,now := time.Now()
		time.Now().Day(),time.Now().Minute(),time.Now().Month(),time.Now().Year()
		格式化,fmt.Printf("%02d/%02d/%02d %02d:%02d:%02d",now.Year()...)
	
		time.Duration用来表示纳秒
		一些常量:
			const (
				Nanosecond Duration = 1
				Microsecond = 1000 * Nanosecond
				Millisecond = 1000 * Microsecond
				Second = 1000 * Millisecond
				Minute = 60 * Second
				Hour = 60 * Minute
			)
			
		格式化
			now := time.Now()
			fmt.Println(now.Format("02/1/2006 15:04"))
			fmt.Println(now.Format("2006/1/02 15:04"))
			fmt.Println(now.Format("2006/1/02"))
			
		练习6: 写一个程序,获取当前时间,并格式化成2017/06/15 08:05:00形式
		练习7: 写一个程序,统计一段代码的执行耗时,单位精确到微秒.
			
			代码地址:
				https://github.com/banna2019/golang.git
	
				目录: golang/src/day3/example/example4
	
	
	3.指针类型
		普通类型,变量存在的就是值,也叫值类型
		获取变量的地址,用&,比如: var a int,获取a的地址: &a
		指针类型,变量存的是一个地址,这个地址存的才是值
		获取指针类型所指向的值,使用: *,比如: var *p int,使用*p获取p指向的值
			var a int = 5
			var p *int = &a 
			
			截图(指针类型)
			
		练习8: 写一个程序,获取一个变量的地址,打印到终端
		练习9: 写一个函数,传入一个int类型的指针,并在函数中修改所指向的值.
			   在main函数中调用这个函数,并把修改前后的值打印到终端,观察结果
			   
			代码地址:
				https://github.com/banna2019/golang.git
	
				目录: golang/src/day3/example/example5
	
		备注:
			*int类型前添加"*"为指针类型
			&a变量前添加"&"为取地址
	
		
	4.流程控制
		If/else
			If/else分支判断
				if condition1{
				}
		
				if condition1{
				}else {
				}
				
				if condition1{
				}else if condition12{
				}else if condition3{
				} else{
				}
				
			If/else分支判断
				package main
				import "fmt"
				func main() {
					bool1 : true
					if bool1 {
						fmt.Printf("The value is true\n")
					}else{
						fmt.Printf("The value is false\n")
					}
				}
				
			练习10: 写一个程序,从终端读取输入,并转成整数,如果转成整数出错,则输出"can not convert to int",并返回.否则输出该整数.
				go build -o bin/zhengxingzh.exe .\day3\example\example10\
				.\bin\zhengxingzh.exe
				3id

				代码地址:
					https://github.com/banna2019/golang.git
		
					目录: golang/src/day3/example/example10	
				
		
		swith case语句
			语法
				swith var {
					case var1:
					case var2:
					case var3:
					default:
				}
				
			写法1
				var i = 0
				swith i {
					case 0:
					case 1:
						fmt.Println("1")
					case 2:
						fmt.Println("2")
					default:
						fmt.Println("def")
				}
		
			写法2
				var i = 0
				swith i {
					case 0:
						fallthrough
					case 1:
						fmt.Println("1")
					case 2:
						fmt.Println("2")
					default:
						fmt.Println("def")
				}
				
			写法3
				var i = 0
				swith i {
					case 0,1:
						fmt.Println("1")
					case 2:
						fmt.Println("2")
					default:
						fmt.Println("def")
				}
				
			写法4
				var i = 0
				swith {
					condition1:
						fmt.Println("i > 0 and i < 10")
					condition12:
						fmt.Println("i > 10 and i < 20")
					default:
						fmt.Println("def")
				}
					
				var i = 0
				swith {
					case i > 0 && i < 10:
						fmt.Println("i > 0 and i < 10")
					case i > 10 && i < 20:
						fmt.Println("i > 10 and i < 20")
					default:
						fmt.Println("def")
				}
				
			写法5
				swith i := 0 {
					case i > 0 && i < 10:
						fmt.Println("i > 0 and i < 10")
					case i > 10 && i < 20:
						fmt.Println("i > 10 and i < 20")
					default:
						fmt.Println("def")
				}
				
			
			练习11: 猜数字,写一个程序,随机生成一个0到100的整数n,然后用户在终端,输入数字,如果和n相等,则提示用户猜对了.如果不相等,则提示用户,大于或小于n
				go build -o bin/rand.exe .\day3\example\example12\ 
				.\bin\rand.exe
				1
			
				代码地址:
					https://github.com/banna2019/golang.git
		
					目录: golang/src/day3/example/example12
					
					
				
		for语句
			写法1
				for 初始化语句;条件判断;变量修改{
				}
				
				for i := 0;i < 100;i++ {
					fmt.Printf("i=%d\n",i)
				}
				
				注意: for (i := 0; i < 100;i++){
				}
				
			练习12: 写一个程序,在终端打印如下图形
				截图(在终端打印如下图形)
				
				代码地址:
					https://github.com/banna2019/golang.git
		
					目录: golang/src/day3/example/example13
				
			
			写法2
				for 条件 {
				}
				
				for i > 0 {
					fmt.Println("i > 0")
				}
				
				//死循环
				for true {
					fmt.Println("i > 0")
				}
				
				//死循环简写
				for {
					fmt.Println("i > 0")
				}
				
			写法3(for range语句)
				str := "hell world,中国"
				for i,v := range str {
					fmt.Printf("index[%d] val[%c] len[%d]\n",i,v,len([]byte(v)))
				}
				
				备注:
					用来遍历数组、slice、map、chan
			
			写法4(break continue语句)
				str := "hello world,中国"	//go里面所有的字符都是utf8的
				
				for i,v := range str{
					if i > 2 {
						continue
					}
					if ( i > 3){
						break
					}
					fmt.Printf("index[%d] val[%c] len[%d]\n",i,v,len([]byte(string(v))))
				}
				
				代码地址:
					https://github.com/banna2019/golang.git
		
					目录: golang/src/day3/example/example14
				
				
			写法5(goto和label语句)
				package main
				import "fmt"
				func main() {
					LABLE1:
						for i := 0; i <= 5; i++ {
							for j := 0; j <= 5; j++ {
								if j == 4 {
									continue LABLE1
								}
								fmt.Printf("i is: %d,and j is: %d\n",i,j)
							}
						}
				}
				
				代码地址:
					https://github.com/banna2019/golang.git
		
					目录: golang/src/day3/example/example15
					
			
				package main
				func main() {
					i := 0
				HERE:
					print(i)
					i++
					if i == 5{
						return
					}
					goto HERE
				}
				
			for练习
				i := 0
				for {
					if i >= 3{
						break
					}
					fmt.Println("",i)
					i++;
				}
				
				打印: 0,1,2
				
				for i := 0; i < 7; i++ {
					if i%2 == 0 {
						continue
					}
					fmt.Println(i)
				}
				
				打印: 1,3,5
				
	4.函数详解
		声明语法: func 函数名(参数列表)[(返回值列表)] {}
			func add() {
			}
			
			func add(a int,b int){
			}
			
			func add(a int,b int) int{
			}
			
			func add(a int,b int)(int,int){
			}
			
			func add(a,b int)(int,int){
			}
		
		声明语法: func函数名 (参数列表)[(返回值列表)]{}
			func add()			//这个函数是有问题的,因为"{}"花括号与"add()"不在同一行
			{
			}
		
		golang函数特点:
			a.不支持重载,一个包不能有两个名字一样的函数
			b.函数是一等公民,函数也是一种类型,一个函数可以赋值给变量
			c.匿名函数
			d.多返回值
			
			package main
			import "fmt"
			func add(a,b int) int{
				return a + b
			}
			
			func main() {
				c := add	//函数也是变量
				fmt.Println(c)
				
				sum := c(10,20)
				fmt.Println(sum)
				if(c == add) {		//函数之间是不能进行比较的,程序无法编译通过
					fmt.Println("c equal add")
				}
			}
			
			
			package main
			import "fmt"
			
			type add_func func(int,int) int		//type是定义一种类型(函数也是一种类型)
			
			func add(a,b int) int{
				return a + b
			}
			
			func operator(op add_func,a int,b int) int{
				return op(a,b)
			}
			
			func main() {
				c := add
				fmt.Println(c)
				sum := operator(c,100,200)
				fmt.Println(sum)
			}

			代码地址:
				https://github.com/banna2019/golang.git
		
				目录: golang/src/day3/example/example16			
			
			备注:
				函数是不能比较的
			
			
			package main
			import "fmt"
			
			type add_func func(int,int) int
			
			func add(a,b,c int) int{
				return a + b
			}
			
			func operator(op add_func,a int,b int) int{
				return op(a,b)
			}
			
			func main() {
				c := add		//这里的add赋值给c,add接收的是三个参数
				fmt.Println(c)
				sum := operator(c,100,200)	//operator中的op只接收两个参数,所以没法这个代码是没法编译通过的
				fmt.Println(sum)
			}
			

			package main
			import "fmt"
			
			type add_func func(int,int) int
			
			func add(a,b int) int{
				return a - b
			}
			
			func operator(op add_func,a int,b int) int{
				return op(a,b)
			}
			
			func main() {
				c := add
				fmt.Println(c)
				sum := operator(c,100,200)
				fmt.Println(sum)
			}
			
		
		函数参数传递方式:
			值传递
			引用传递
			
			注意1: 无论是值传递,还是引用传递,传递函数的都是变量的副本,不过,值传递是值的拷贝.引用传递是地址的拷贝,一般来说,地址拷贝更为高效.
			       而值拷贝取决于拷贝的对象大小,对象越大,则性能越低
				   
			
			注意2: map、slice、chan、指针、interface默认以引用的方式传递
			
				package main
				impot "fmt"
				
				func modify(a int){
					a = 100
				}
				
				fun main() {
					a := 8
					fmt.Println(a)
					modify(a)
					fmt.Println(a)
				}
				
				
			练习13: 修改上面的程序,使其功能正确.
			
				
		命名返回值的名字
			func add(a,b int)(c int){
				c = a + b
				return
			}
			
			func calc(a,b int)(sum int,avg int){
				sum = a + b
				avg = (a + b)/2
				return
			}
			
		
		_标识符,用来忽略返回值
			func calc(a,b int)(sum int,avg int){
				sum = a + b
				avg = (a+b)/2
				return
			}
			
			func main(){
				sum,_ := calc(100,200)
			}
			
			
		可变参数
			func add(arg...int) int{		//0个或多个参数
			}
		
			func add(a int,arg...int) int{	//1个或多个参数
			}
			
			func add(a int,b int,arg...int) int{	//2个或多个参数
			}
			
			注意: 其中arg是一个slice,可以通过arg[index]依次访问所有参数通过len[arg]来判断传递参数的个数
			
			练习14: 写一个函数add,支持1个或多个int相加,并返回相加结果
			练习15: 写一个函数concat,支持1个或多个string相拼接,并返回结果
			
			代码地址:
				https://github.com/banna2019/golang.git
		
				目录: golang/src/day3/example/example18
			
		匿名函数
			package main
			import "fmt"
			
			func test(a,b int) int {
				result := func(a1 int,b1 int) int{		//"func(a1 int,b1 int)"为匿名函数
					return a1 + b1
				}(a,b)		//"(a,b)"为调用匿名函数
				return result
			}
			
			
			
			package main
			import "fmt"
			
			func test(a,b int) int {
				result := func(a1 int,b1 int) int{
					return a1 + b1
				}
				return result(a,b)
			}
			
			代码地址:
				https://github.com/banna2019/golang.git
		
				目录: golang/src/day3/example/example20
			
			
			
		defer用途:
			1.当函数返回时,执行defer语句.因此,可以用来做资源清理
			2.多个defer语句,按先进后出的方式执行
			3.defer语句中的变量,在defer声明时就决定了
		
			func a(){
				i := 0
				defer fmt.Println(i)
				i++
				return
			}
			
			func f() {
				for i := 0; i < 5;i++ {
					defer fmt.Printf("%d",i)
				}
			}

			代码地址:
				https://github.com/banna2019/golang.git
		
				目录: golang/src/day3/example/example19		
			
			
			
			关闭文件句柄
				func read() {
					file := open(filename)
					defer file.Close()	//文件操作
				}
				
			锁资源释放
				func read() {
					mc.Lock()
					defer mc.Unlock()	//其他操作
				}
			 	
			
			数据库连接释放
				func read() {
					conn := penDatabase()
					defer conn.Close()		//其他操作
				}
				
				func read() {
					conn,err := openConn()
					if err != nil {
						return
					}
					defer conn,Close()
				}
			
				func read(){
					conn,err := openConn()
					
					defer func(){			//这里"func()"是匿名函数
						if conn != nil{
							conn.Close()
						} 
					}()		//这里的"()"是匿名函数调用
				}
			
			
	5.课后作业
		a.编写程序,在终端输出九九乘法表
		b.一个数如果恰好等于它的因子之和,这个数就称为"完数",例如6=1+2+3.编程找出1000以内的所有完数
		c.输入一个字符串,判断其是否为回文,回文字符串是指从左到右读和从右到做读完全相同的字符串
		d.输入一行字符,分别统计出其中英文字母、空格、数字和其它字符的个数
		e.计算两个大数相加的和,这两个大数会超过int64的表示范围
