

基本数据类型和操作符
	1.文件名&关键字&标识符
		a.所有go源码以.go结尾
		b.标识符以字母或小花仙开头,大小写敏感,比如:
			boy Boy a+b Oboy _boy =_boy  _ 		//这里的一个下划线"_",代表一个变量
		c._是特殊标识符,用来忽略结果
		d.保留关键字(25个)
			截图(保留关键字)
		
		备注:
			go中的可见性和大小写相关的,如果是大写开头的变量;那么在语言中是可导出的也就是说保外可导出
		
	2.Go程序基本结构
		package main
		import (
			"fmt"
		)
		
		func main() {
			fmt.Println("Hello,World")
		}
		
		a.任何一个代码文件隶属于一个包
		b.import关键字,引用其他包
			import("fmt")
			import("os")
			通常习惯写成:
			import (
				"fmt"
				"os"
			)
		c.golang可执行程序,package main,并且有且只有一个main入口函数
		d.包含函数调用
			1.同一个包中函数,直接调用
			2.不同包中函数,通过包名+点+函数名进行调用
		e.包访问控制规则:
			1.大写意味着这个函数/变量时可导出的
			2.小写意味着这个函数/变量时私有的,包外部不能访问
		截图(Go程序基本结构)
		截图(Go程序基本结构-01)
		
		
		代码实例:
			写一个程序,对于给定一个数字n,求出所有两两相加等于n的组合.
			比如: 对于n=5,所有组合如下所示:
				0+5=5
				1+4=5
				2+3=5
				3+2=5
				4+1=5
				5+0=5
				
			一个程序包含两个add和main,其中add包中两个变量;Name和age.请问main包中如何访问Name和age?
				package main
				import(
					"add"
				)
				
				func main() {
					fmt.Println("result:",add.Name)
					fmt.Println("result:",add.age)
				}
				
				
			包别名的应用,开发一个程序,使用包别名来访问包中的函数?
				package main
				import(
					a "add"
				)
				
				func main(){
					fmt.Println("result:",a.Name)
					fmt.Println("result:",a.Age)
				}
				
			每个源文件都可以包含一个init函数,这个init函数自动被go运行框架调用.开发一个程序演示这个功能?
				package main
				import(
					_"add"
				)
			
				func init() {
					fmt.Println("initialized")
				}
				
				备注:
					不同包里面的变量名字可以一样,但是他们是属于不同的变量
					
					第一步是初始化全局变量
					第二部是初始化init函数,不需要自己调用的;只用写实现init函数,然后go的运行时库它会自动调用init函数来初始化
					第三部是执行main函数
					如果在代码中使用import 导入一个包的话,是先初始化导入的包
			
			包的只初始化,不引用.请开发一个程序,演示这个做法
				package main
				import (
					_ "add"
				)
				
				func main() {
					fmt.Println("add not refer:")
				}
			
		函数声明和注释
			1.函数声明: func函数名字(参数列表)(返回值列表){}
				举例:
					func add() {
					}
					
					func add(a int,b int){
					}
			
					func add(a int,b int)(int,int){		//这里的括号中的两个"int"表示的是函数的返回值
					}
					
			2.注释,两种注释,单行注释: // 和多行注释: /**/
				//add 计算两个整数的和,并返回结果
				func add(a int,b int) int{
				}
				
				/*add 计算两个整数的和,并返回结果*/
				func add(a int,b int) int {
				}
				
	3.常量和变量
		常量
			1.常量使用const修饰,代表永远是只读的,不能修改
			2.const只能修饰boolean,number(int相关类型、浮点类型、complex)和string
			3.语法: const identifier [type] = value,其中type可以省略
				举例:
					const b string = "hello world"
					const b = "hello world"
					const Pi = 3.1415926
					const a = 9/3
					const c = getValue()	//这种写法是错误的,一个常量不能直接从一个函数中直接赋值
			4.比较优雅的写法
				const(
					a = 0
					b = 1
					c = 2
				)
			5.更加专业的写法:
				const(
					a = iota		//iota默认会把a赋值为0,然后后面的赋值都是加1"+1" 
					b //1
					c //2
				)
					
					
			代码实例:
				定义两个常量Man=1和Female=2,获取当前时间的秒数,如果能被Female整除,则在终端打印female,否则打印man.
				
					Second := time.Now().Unix()
					官网上查找包(package)的使用方法:
						https://golang.org/pkg/time/
						
					example6目录下面
					
					
		
		变量
			1.语法 var identifier type
				举例1:
					var a int
					var b string
					var c bool
					var d int = 8
					var e string = "hello world"
		
				举例2:
					Var(
						a int 		//默认为0
						b string 	//默认为""
						c bool 		//默认为false
						d int = 8
						e string = "hello world"
					)
				
				举例3:
					Var(
						a int 		//默认为0
						b string 	//默认为""
						c bool 		//默认为false
						d = 8		//golang中默认会做类型推导
						e = "hello world"
					)				
		
		代码实例:
			写一个程序获取当前运行的操作系统名称和PATH环境变量的值,并打印在终端.
			package main
			import (
				"fmt"
				"os"
			)
			
			func main() {
				var goos string = os.Getenv("GOOS")
				fmt.Printf("The operating system is: %s\n",goos)
				var path string = os.Getenv("PATH")
				fmt.printf("Path is %s\n",path)
			}
		
		值类型和引用类型
			1.值类型: 变量直接存储值,内存通常在栈中分配
				截图(值类型和引用类型)
				
			2.引用类型: 变量存储的是一个地址,这个地址存储最终的值.内存通常在堆上分配.通过GC回收
				截图(值类型和引用类型)
		
				备注:
					引用类型存储的是指针地址:
						在32位系统中,指针是4字节
						在64位系统中,指针是8字节
			
			3.值类型: 基本数据类型int、float、bool、string以及数组和struct(结构体)
			
			4.引用类型: 指针、slice(切片)、map、chan等都是引用类型
			
			
			代码实例1(example8):
				写一个程序来打印值类型和引用类型变量到终端,并观察输出结果.
				package main
				import(
					"fmt"
					"os"
				)
				
				func main(){
					var a = 100
					var b chan int = make(chan int,1)
					fmt.Println("a=",a)
					fmt.Println("b=".chan)
				}

			代码实例2(example9):
				写一个程序,交换两个整数的值.比如: a=3;b=4;交换之后: a=4;b=3
				
			
			备注:
				值类型的话,内存是在栈中分配的
					栈中内存存储是先进后出
					栈的内存大小是有限制的
				引用类型的话,内存是在堆中分配的(物理内存)
				一个进程中有多个线程,多个线程可以往堆里面去分配
				既然没有个线程都可以往堆里面分配,就会涉及到锁机制,所以堆内存的分配机制性能没有栈的分配机制性能高
				
				栈:
					直接是函数调用的时候,栈空间直接去分配内存
					栈上分配内存的性能是最高的
					在程序执行的时候栈一般都是公用的
				堆:
					是从系统的内存区去分配内存
					堆上分配内存性能没有那么高
		
		
		变量的作用域
			1.在函数内部声明的变量叫做局部变量,生命周期仅限于函数内部
			2.在函数外部声明的变量叫做全局变量,生命周期作用于整个包,如果是大写的,可以在外部访问.
		
		
			备注:
				大括号括起来的都是语句块,局部变量不能超出语句块调用
		
			代码实例1:
				请指出下面程序输出是什么?(GoG)
					package main
					
					var a = "G"
					func main() {
						n()
						m()
						n()
					}
					
					func n() {
						fmt.Println(a)
					}
					
					func m() {
						a := "o"
						fmt.Println(a)
					}

				请指出下面程序输出是什么?(Goo)
					package main
					
					var a = "G"
					func main() {
						n()
						m()
						n()
					}
					
					func n() {
						fmt.Println(a)
					}
					
					func m() {
						a = "o"				//这里是全局变量了
						fmt.Println(a)
					}
		
				请指出下面程序的输出是什么?(GOG)
					package main
					var a string
					import "fmt"
					
					func main() {
						a = "G"
						fmt.Println(a)
						f1()
					}
					
					func f1() {
						a := "O"
						fmt.Println(a)
						f2()				//这里是调用函数,就是新的一个调用;生命周期就到了f2里面,f2里面没有局部变量就直接调用全局变量
					}
					
					func f2() {
						fmt.Println(a)
					}
					
					
	4.数据类型和操作符
		1.bool类型,只能存true和false
			var a bool
			var a bool = true
			var a = true
		
		2.相关操作符,!、&&、||	
			var a bool = true
			var b bool 
			
			请问!a、!b、a && b、a || b的值分别是多少？
			
			备注:
				"&&"有一个操作短路操作,前面一个为false的话就不会做后面的表达式了
				"||"前面已经为真的话,后面就不需要求了(不需要运算了)
		
		3.数字类型,主要有int、int8、int16、int32、int64、uint8、uint16、uint32、uint64、float32、float64		//uint无符号整型(用来存0到正整数)
			备注:
				测试uint8无符号整型的存储数值程序
					package main
					
					import(
						"fmt"
					)
					
					func main() {
						var a uint8 = 200
						var b uint8 = 300
						
						fmt.Println(a)
						fmt.Println(b)
					}
				
		4.类型转换,type(vaiable),比如: var a int = 8; var b int32 = int32(a)
			package main
			func main() {
				var a int
				var b int32
				a = 15
				b = a + a 	//compiler erro
				b = b + 5 	//ok: 5 is a constant
			}
			
			备注:
				这个程序中a和b是不同的类型,是不能直接进行运算的;需要做类型转换
			
			代码实例1:
				请指出下面程序的输出是什么?(终端直接数据编译错误"m=n",类型不一致)
					package main
					import(
						"fmt"
					)
					
					func main() {
						var n int16 = 34
						var m int32
						
						m = n
						m = int32(n)
						fmt.Printf("32 bit int is: %d\n",m)
						fmt.Printf("16 bit int is: %d\n",n)
					}
			
		备注:
			全局变量:
				var a int = 100		//这个是一条语句
				a := 100	//这里其实是两条语句(var a int 和 a = 100),这个是编译不过去的会有问题
	
		
		5.逻辑操作符: ==、!=、<、<=、>和>=
			package main
			import(
				"fmt"
			)
			
			func main() {
				var a int = 10
				if(a > 10){
					fmt.Println(a)
				}
			}
	
			备注:
				1.一个等于号"="赋值
				2.两个等于号"==",判断两个变量是否相等
				
		6.数学操作符: +、-、*、/等等
			package main
			import(
				"fmt"
			)
			
			func main() {
				var a int = 10
				var b = a + 10
			}
			
		代码实例(example14):
			使用main/rand生成10个随机整数,10个小于100的随机整数以及10个随机浮点数？
				
				
	5.字符串类型			
		1.字符类型: var a byte		//字符必须使用单引号,不能使用双引号
			var a byte = 'c'
			
		2.字符串类型: var str string
			package main
			import(
				"fmt"
			)
			
			func main(){
				var str = "hello world"
				fmt.Println("str=",str)
			}
			
		备注:
				byte: 一个字符
				string: 一个字符串	
				
			格式化输出
				golang官网地址:
					https://go-zh.org/pkg/fmt/

					%v	相应值的默认格式。在打印结构体时，“加号”标记（%+v）会添加字段名
					%#v	相应值的Go语法表示
					%T	相应值的类型的Go语法表示
					%%	字面上的百分号，并非值的占位符
					
		
		3.字符串表示两种方式: 1) 双引号 2) `` (反引号)
			package main
			import(
				"fmt"
			)
			
			func main(){
				var str = "hello world\n\n"
				var str2= `hello \n \n \n 
				this is a test string
				This is a test string too.`
				fmt.Println("str=",str)
				fmt.Println("str2=",str2)
			}
	
		4.字符串拼接
			代码地址:
				https://github.com/banna2019/golang.git
				
				目录: golang/src/example17


	代码练习:
		1.判断101-200之间有多少个素数,并输出所有素数.
			go build -o bin/sushu.exe .\day3\work\example1
			 bin/sushu.exe
			 100 200	//输入两个数字确定范围
		
		2.打印出100-999中所有的"水仙花数",所谓"水仙花数"是指一个三位数,其各位数字立方和等于该数本身.例如: 153 是一个"水仙花数",因为153=1的三次方+5的三次方+3的三次方
			go build -o bin/shuixianhua.exe .\day3\work\example3\
			.\bin\shuixianhua.exe
			100 999
			
			go build -o bin/shuixianhua1.exe .\day3\work\example5\
			.\bin\shuixianhua1.exe
			153
			
		3.对于一个数n,求n的阶乘之和,即: 1! + 2! + 3! + ...n!		//"!"感叹号代表阶层
			go build -o bin/jieceng.exe .\day3\work\example4
			.\bin\jieceng.exe
			5
		
		代码地址:
			https://github.com/banna2019/golang.git
			
			目录: golang/src/day3/work

		备注:
			任何函数调用时传入的参数调用,都是一个副本进去;如果是值类型的话这个副本改了,外面变量的原始值是不会发生变化的
			如果要传地址或者传指针的话,说明在函数内部需要改外面变量的值;如果没有必要修改的话,直接使用值类型即可