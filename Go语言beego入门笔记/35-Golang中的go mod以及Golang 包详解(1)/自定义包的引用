

自定义包:
	1.进入项目目录下面初始化项目
		cd /Users/banna/Documents/Github/golang/src/demo35/itying
		go mod init itying		//初始化项目


	2.使用vs code导入项目
		截图(打开项目)


	3.自定包
		a.在项目目录下面新建目录(目录名称和自动包名称是要相同的)
		b.自动包的引用,使用"import" 后添加项目"go mod init itying"的名称+自定义包目录的名称即可
		c.一个自定义包中还可以引入应另一个自定义包


注意事项:

	• 一个文件夹下面直接包含的文件只能归属一个package,同样一个package的文件不能在多个文件夹下.

	• 包名可以不和文件夹的名字一样,包名不能包含-符号.

	• 包名为main的包为应用程序的入口包,这种包编译后会得到一个可执行文件,而编译不包含main包的源代码则不会得到可执行文件.




init()函数执行顺序

	Go语言包会从main包开始检查其导入的所有包,每个包中又可能导入了其他的包.Go编

	译器由此构建出一个树状的包引用关系,再根据引用顺序决定编译顺序,依次编译这些包的代码.

	在运行时,被最后导入的包会最先初始化并调用其init()函数.



go mod命令帮助
	download download modules to local cache (下载依赖的module 到本地cache)

	edit edit go.mod from tools or scripts (编辑go.mod 文件)

	graph print module requirement graph (打印模块依赖图))

	init initialize new module in current directory (再当前文件夹下初始化一个新的module,创建go.mod文件))

	tidy add missing and remove unused modules (增加丢失的module,去掉未用的module)

	vendor make vendored copy of dependencies (将依赖复制到vendor 下)

	verify verify dependencies have expected content (校验依赖检查下载的第三方库有没有本地修改,如果有修改,则会返回非0,否则验证成功.)

	why explain why packages or modules are needed (解释为什么需要依赖)



Golang中使用第三方包

	1.查找第三方包
		https://pkg.go.dev/ 	//查找看常见的golang第三方包

	2.安装第三方包
		a.go get 包名 	(全局)
			go get github.com/shopspring/decimal

		b.go mod download	(全局)		//这里会把第三方包下载到GOPATH的目录下(~/Documents/Github/golang/pkg/mod/github.com/shopspring)
			go mod download

		c.go mod vendor  将依赖复制到当前项目的vendor下(本项目)	//会把第三方项目复制到当前目录下
			go mod vendor


	3.其他
		在代码中直接引用其他第三方模块,运行代码的时候会自动进行下载
		

