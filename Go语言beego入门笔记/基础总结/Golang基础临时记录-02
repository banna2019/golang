

关于字节:

字节也叫Byte,是计算机数据的基本存储单位.8bit(位)=1Byte(字节) 1024Byte(字节)=1KB

1024KB=1MB 1024MB=1GB 1024GB=1TB.在电脑里一个中文字是占两个字节的



golang中类型
	变量
		变量类型
			1.值类型
				基本数据类型和数组
				除开slice,map,channel类型之外的变量都是值类型
				值类型的变量,不用初始化,可以直接使用
			
			2.指针类型
				指针类型的变量,需要初始化才能使用.(slice是一个特例,slice的零值是nil,但是可以直接append)
			
			3.引用类型
				slice、map、channel、"*"指针也是引用数据类型

		变量初始化
			make返回的是对象.
				对值类型对象的更改,不会影响原始对象的值
				对引用类型对象的更改,会影响原始对象的值
			new返回的是对象的指针,对指针所在对象的更改,会影响指针指向的原始对象的值.

		参考博客地址:
			https://studygolang.com/articles/29675
			https://juejin.im/post/6844903954950651912


MAP:
	详情查看"Golang map详解"

	map是一种无序的基于key-value的数据结构,Go语言中的map是引用类型,必须初始化才能使用
	map类型的变量默认初始值为nil,需要使用make()函数来分配内存.
	map获取容量不能使用cap,cap返回的是数组切片分配的空间大小,根本不能用于map.要获取map的容量可以使用len函数.


函数:
	详情查看"Golang 函数详解-函数定义、函数参数、函数返回值"

	Go语言中支持: 函数、匿名函数和闭包
	函数名: 由字母、数字、下划线组成.但函数名的第一个字母不能是数字.在同一个包内,函数名称也不能重名
	参数: 参数由参数变量和参数变量的类型组成,多个参数之间使用","隔离
	返回值: 返回值由返回值变量和其变量类型组成,也可以只写返回值的类型,多个返回值必须用()包裹,并用","隔离.
	函数体: 实现指定功能的代码块.

	可变参数:
		可变参数是指函数的参数数量不固定.Go语言中的可变参数通过在参数名后加"..."来标识.
		固定参数搭配可变参数使用时,可变参数要放在固定参数的后面.

	返回值命名:
		函数定义时可以给返回值命名,并在函数体中直接使用这些变量,最后通过return关键字返回.

	函数变量作用域:
		全局变量:
			全局变量是定义在函数外部的变量,它在程序整个运行周期内都有效,在函数中可以访问到全局变量
		局部变量:
			局部变量是函数内部定义的变量,函数内定义的变量无法在该函数外使用


		如果局部变量和全局变量重名,优先访问局部变量


	函数类型与变量
		定义函数类型
			可以使用type关键字来定义一个函数类型


	高阶函数
		高阶函数分为函数作为参数和函数作为返回值两部分.


	匿名函数和闭包
		匿名函数:
			匿名函数因为没有函数名,所以没有办法像函数那样调用,所以匿名函数需要保存到某个变量或者作为立即执行函数
				直接执行函数:
					func (x,y int) int{
						...
					}(10,20)

			匿名函数多用于实现回调函数和闭包


		闭包:
			闭包可以理解成"定义一个函数内部的函数".在本质上,闭包是将函数内部和外部链接起来的桥梁;或者说是函数和其引用环境的组合体
			闭包=函数+应用环境


	defer语句
		Go语言中的defer语句会将其后面跟随的语句进行延迟处理.在defer归属的函数即将返回时,将延迟处理的语句按defer定义的逆序进行执行.
		也就是说,先被defer的语句最后被执行,最后被defer的语句,最先被执行.


	内置函数painc/recover
		内置函数 					功能
		close				主要用来关闭channel
		len					用来求长度,比如string、array、slice、map、channel
		new					用来分配内存,主要用来分配值类型,比如int、struct.返回的是指针
		make 				用来分配内存,主要用来分配引用类型,比如chan、map、slice
		append				用来追加元素到数组、slice中
		panic和recover		用来做错误处理


		备注:
			1.recover()必须搭配defer使用
			2.defer一定要在可能引发panic的语句之前定义.


time包
	golang中time包提供了时间的显示和测量用的函数
	time.now()	//获取当前时间
	格式化的为Go的出生时间2006年1月2号15点04分05秒(06,01,02,15,04,05)
	时间戳是自1970你那1月1日(08:00:00GMT)至当前时间的总毫秒数.它也被称为Unix时间戳(UninxTimestamp)


指针
	详见"Golang指针详解、make new方法分配内存"

	要搞明白Go语言中的指针需要先知道3个概念: 指针地址、指针类型和指针取值
	Go语言中的指针操作非常简单,值需要记住两个符号:
		&(取地址)
		*(根据地址取值)

	指针地址和指针类型
		每个变量在运行时都拥有一个地址,这个地址代表变量在内存中的位置.Go语言中使用"&"字符放在变量前面对变量进行取地址操作.
		Go语言中的值类型(init、float、bool、string、array、struct)都有对应的之后怎类型,如: int、int64、string等.

	指针取值
		在对普通变量使用"&"操作符取地址后会获得这个变量的指针,然后可以对指针使用"*"操作

		变量、指针地址、指针变量、取地址、取值的相互关系和特性如下:
			.对变量进行取地址(&)操作,可以获得这个变量的指针变量
			.指针变量的值是指针地址
			.对指针变量进行取值(*)操作,可以获得指针变量指向的原始变量的值

	new和make
		在Go语言中对引用类型的变量,在使用的时候不仅要声明它,还要为它分配内存空间,否则值就没有办法存储.
		而对于值类型的声明不需要分配内存空间,因为它们在声明的时候已经默认分配好内存空间
		Go语言中的new和make是内建的两个函数,主要用来分配内存.

		make适用于内存分配的,区别于new,它只用于slice、map以及channel的内存创建,而且它返回的类型就是这三个类型本身,
		而不是他们的指针类型,因为这三种类型就是引用类型,所以没有必要返回他们的指针了.

		new与make的区别
			1.二者都是用来做内存分配的
			2.make只用于slice、map以及channel的初始化,返回的还是这三个引用类型本身
			3.而new用于类型的内存分配,并且内存对应的值为类型零值,返回的值指向类型的指针


