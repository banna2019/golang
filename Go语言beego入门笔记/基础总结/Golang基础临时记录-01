

export GO111MODULE=on	//具有什么功能

golang中的”Printf“格式化输出  http://docscn.studygolang.com/pkg/fmt/

go语言中:
	变量类型推导
		有时候会将变量的类型省略,这个时候编译器会根据等号右边的值来推导变量的类型完成初始化

	变量(var)
		:= (短变量声明)--->短变量声明只能用于局部变量,不能用于全局变量

	匿名变量(anonymous variable)
		_ (忽略摸个值,可以使用匿名变量)--->匿名变量不占用命名空间,不会分配内存,所以匿名变量之间不存在重复声明.
		_ 表示占位,表示忽略

	常量(const)
		相对于变量,常量时恒定不变的值,多用于定义程序运行期间不会改变的那些值.常量的声明和变量声明非常类似,知识吧var换成const,常量在定义的时候必须赋值

		1.多个常量一起声明
		2.多常量共用相同值
		3.常量计数器"iota"
		4."_"常量中跳过某些值
		5.常量声明插队
		6.常量中多个iota定义在一行

	Go语言格式化代码
		go fmt main.go


	Go语言数据类型
		数据类型分类:
			1.基本数据类型:
				整型、浮点型、布尔型、字符串
			2.复合数据类型:
				数组(array)、切片(slice)、结构体(struct)、函数(func)、map、通道(channel)、接口(interface)等


		整型:
			有符号按长度: int8、init16、int32、int64
			无符号按长度: uint8、uint16、uint32、uint64

			特殊整型
				1.uint: 32位系统上就是uint32,63位系统上就是uint64
				2.int: 32位系统上就是int32,64位系统上就是int64
				3.uintptr: 无符号整型,用于存放一个指针


		浮点型:
			float32和float64;两种浮点类型数据都遵循IEEE 754标准


			精度丢失处理:
				使用第三方包来解决精度损失问题: https://github.com/shopspring/decimal


		布尔值:
			Go语言中布尔类型数据只有true(真)和false(假)两个值
			注意:
				1.布尔类型变量的默认值为false
				2.Go语言中不允许将整型转换为布尔型
				3.布尔型无法参与数值运算,也无法域其他类型进行转换


		字符串:
			Go语言中的字符串一原生数据类型出现,使用字符串就像使用其他原生数据类型一样.Go语言里的字符串的内部实现使用UTF-8编码.
			字符串的值为双引号("")中的内容,可以在Go语言的源码中直接添加非ASCII码字符.

			字符串转义符
				\r		回车符(返回行首)
				\n		换行符(直接跳到下一行的同列位置)
				\t		制表符
				\'		单引号
				\"		双引号
				\\		反斜杠

			字符串的常用操作方法
				见"06-Golang语言基本数据类型"


			byte和rune类型
				字节(byte): 是计算机中数据处理的基本单位,习惯上用大B来表示,1B(byte,字节)

				Go语言的字符:
					1.uint8类型,或者叫byte型,代表了ASCII码的一个字符.
					2.rune类型,代表UTF-8字符.
						当需要处理中文、日文或者其他符合字符时,则需要用到runne类型.rune类型实际是一个int32.
						Go使用了特殊的rune类型来处理Unicode,让基于Unicode的文本处理更为方便,也可以使用byte型进行默认字符串处理,性能和扩展性都有照顾

			修改字符串
				要修改字符串,需要先将其转换成[]rune或[]byte,完成之后再换成成string.无论哪种转换,都会重新分配内存,并复制字节数据
				见"06-GoLang语言基本数据类型"


		数组(array)
			.数组总中的元素(element)可以是任意的原始类型(例如: int、string)
			.一个数组包含的元素的个数成为数组的长度
			.Golang中数组是一个长度固定的数据类型,数组的长度是类型的一部分;例如[5]int和[10]int是两个不同的类型.
			.Golang中的数组的另一个特点是占用内存的连续性,也就是数组中的元素是被分配到连续的内存地址中的,因而索引数组元素的速度非常快
			.数组的下标开始是"0";访问越界(下标在合法范围之外),则触发访问越界,会panic
			.数组初始化详见"Golang中的数组-数组的循环遍历"
			.数组是值类型,赋值和传参会复制整个数组.因此改变副本的值,不会改变本身的值.
			.数组支持"=="、"!="操作符,因为内存总是被初始化过的
			.[n]*T: 表示指针数组;[n]T: 表示数组指针
			.多维数组只有第一层可以使用"..."来让编译器推导数组长度.

			值类型 ：改变变量副本值的时候,不会改变变量本身的值
			引用类型：改变变量副本值的时候,会改变变量本身的值


		切片(slice)
			.切片(Slice)是一个拥有相同类型元素的可边长的序列.它是基于数组类型做的一层封装.
			.切片(Slice)非常灵活,自持自动扩容
			.切片(Slice)一个引用类型,它的内部结构包含地址、长度和容量.
			.切片(Slice)拥有自己的长度和容量,可以通过使用内置的len()函数求长度,使用内置的cap()函数求切片的容量.
			.切片追加元素:
				1.append()函数将元素追加到切片最后并返回切片
				2.切片的容量安装1,2,4,8,16这样的规则自动进行扩容,每次扩容后都是扩容的2倍
			.使用Go内建的copy()函数复制切片来解决,因切片是引用类型共用底层数组;修改切片导致所有切片都发生变更



Golang流程控制
	for rang(键值循环)
		Go语言中可以使用for range遍历数组、切片、字符串、map及通道(channel)通过for range遍历的返回值有以下规律
			1.数组、切片、字符串返回索引和值
			2.map返回键和值
			3.通道(channel)值返回通道内的值


	switch的穿透fallthrought
		fallthrought语法可以执行满足条件的case的下一个case,是为了兼容C语言中的case设计的."fallthrought"默认只能穿透一层

	break(跳出循环)
		Go语言中break语句用于如下几个方面:
			.用于循环语句中跳出循环,并开始执行循环之后的语句
			.break在switch(开关语句)中在执行一条case后跳出语句的作用
			在多重循环中,可以标号label标出想break的循环

	continue(继续下次循环)
		continue语句可以结束当前循环,开始下一次的循环迭代过程,仅限在for循环内使用.
		continue中也可以跳出指定标签


	goto(跳到指定标签)
		goto语句通过标签进行代码间的无条件跳转,goto语句可以再快速跳出循环、避免重复退出上有一定的帮助.Go语言中使用goto语句能简化一些diamante的实现过程


	备注:
		范例见"GoLang中的流程控制if else for的基本使用"



